from collections import deque

def is_valid(state):
    missionaries_left, cannibals_left, boat, missionaries_right, cannibals_right = state

    if missionaries_left < 0 or missionaries_right < 0 or cannibals_left < 0 or cannibals_right < 0:
        return False
    if (missionaries_left > 0 and missionaries_left < cannibals_left) or (missionaries_right > 0 and missionaries_right < cannibals_right):
        return False
    return True

def goal_state(state):
    return state == (0, 0, 0, 3, 3)

def get_successors(state):
    successors = []
    missionaries_left, cannibals_left, boat, missionaries_right, cannibals_right = state

    if boat == 1:
        for m in range(3):
            for c in range(3):
                if 1 <= m + c <= 2:
                    new_state = (missionaries_left - m, cannibals_left - c, 1 - boat, missionaries_right + m, cannibals_right + c)
                    if is_valid(new_state):
                        successors.append(new_state)
    else:
        for m in range(3):
            for c in range(3):
                if 1 <= m + c <= 2:
                    new_state = (missionaries_left + m, cannibals_left + c, 1 - boat, missionaries_right - m, cannibals_right - c)
                    if is_valid(new_state):
                        successors.append(new_state)

    return successors

def solve_missionaries_cannibals():
    initial_state = (3, 3, 1, 0, 0)
    if not is_valid(initial_state):
        return "Initial state is not valid."

    visited = set()
    frontier = deque([initial_state])
    parent = {}
    found = False

    while frontier:
