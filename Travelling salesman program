from itertools import permutations

def calculate_total_distance(order, distances):
    total_distance = 0
    for i in range(len(order) - 1):
        total_distance += distances[order[i]][order[i + 1]]
    total_distance += distances[order[-1]][order[0]]  # Return to the starting point
    return total_distance

def traveling_salesman_bruteforce(distances):
    num_cities = len(distances)
    if num_cities < 2:
        return []
    
    # Generate all possible permutations of cities
    all_possible_orders = list(permutations(range(num_cities))
    
    # Initialize the minimum distance and order
    min_distance = float('inf')
    best_order = None
    
    # Calculate the total distance for each order and find the minimum
    for order in all_possible_orders:
        distance = calculate_total_distance(order, distances)
        if distance < min_distance:
            min_distance = distance
            best_order = order
    
    return best_order, min_distance

# Example usage:
# Replace `distances` with your distance matrix
distances = [
    [0, 29, 20, 21],
    [29, 0, 15, 12],
    [20, 15, 0, 17],
    [21, 12, 17, 0]
]

best_order, min_distance = traveling_salesman_bruteforce(distances)
print("Best order:", best_order)
print("Minimum distance:", min_distance)
