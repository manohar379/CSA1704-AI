import heapq

class Node:
    def __init__(self, state, parent=None, action=None, cost=0, heuristic=0):
        self.state = state
        self.parent = parent
        self.action = action
        self.cost = cost
        self.heuristic = heuristic

    def __lt__(self, other):
        return (self.cost + self.heuristic) < (other.cost + other.heuristic)

def astar_search(initial_state, goal_state, heuristic_function):
    open_list = []
    closed_set = set()

    start_node = Node(initial_state)
    start_node.cost = 0
    start_node.heuristic = heuristic_function(initial_state, goal_state)

    heapq.heappush(open_list, start_node)

    while open_list:
        current_node = heapq.heappop(open_list)

        if current_node.state == goal_state:
            path = []
            while current_node:
                path.append((current_node.state, current_node.action))
                current_node = current_node.parent
            return path[::-1]

        closed_set.add(current_node.state)

        for action, next_state, step_cost in get_successors(current_node.state):
            if next_state in closed_set:
                continue

            new_cost = current_node.cost + step_cost
            new_node = Node(next_state, current_node, action, new_cost, heuristic_function(next_state, goal_state))

            for i, node in enumerate(open_list):
                if node.state == new_node.state and node.cost > new_node.cost:
                    open_list[i] = new_node
                    break
            else:
                heapq.heappush(open_list, new_node)

    return None

def get_success
